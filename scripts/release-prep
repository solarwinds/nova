#!/bin/bash
set -e

export RELEASE_VERSION=$(node -p "require('./package.json').version")

if [ "$SOURCE_BRANCH" == "" ]; then
      echo "Missing required environment variable SOURCE_BRANCH"
      exit 1
fi

if [ "$RELEASE_BRANCH" == "" ]; then
      echo "Missing required environment variable RELEASE_BRANCH"
      exit 1
fi

if [ "$CIRCLE_BRANCH" == "" ]; then
      echo "Missing required environment variable CIRCLE_BRANCH"
      exit 1
fi

if [ "$INCREMENT_TYPE" == "" ]; then
      echo "Missing required environment variable INCREMENT_TYPE"
      exit 1
fi

if [ "$SOURCE_BRANCH" != "$CIRCLE_BRANCH" ]; then
    echo "ERROR: configuration should be run on the branch that contains the changes (usually main)"
    exit 1
fi

# Merge Changes
if ! git show-ref --quiet $RELEASE_BRANCH; then
    echo "Creating release branch:" $CREATE_RELEASE_BRANCH
    if [ "$CREATE_RELEASE_BRANCH" == "true" ]; then
        echo "Creating $RELEASE_BRANCH"
        git checkout -b $RELEASE_BRANCH
        git push --set-upstream origin $RELEASE_BRANCH
    else
        echo "ERROR: release branch does not exist"
        exit 1
    fi
fi

# Create new branch for PR
TEMP_RELEASE_NAME="update-release-files-$RELEASE_VERSION"
git checkout $RELEASE_BRANCH
git checkout -b $TEMP_RELEASE_NAME $RELEASE_BRANCH
git merge $SOURCE_BRANCH --no-edit -X theirs

# Set Release Version
yarn run set-release-versions-ci

# Set Release Dependency Versions
yarn run set-dependency-versions-ci

# Commit and Push Release Branch Changes
git commit -am "update files for version $RELEASE_VERSION"
git push --set-upstream origin $TEMP_RELEASE_NAME

# create PR update-release-files -> release
response=$(curl -L --silent \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $GITHUB_WRITE_TOKEN" \
  https://api.github.com/repos/solarwinds/nova/pulls \
  -d "{\"title\":\"Update release files v$RELEASE_VERSION\",
  \"body\":\"Merging $SOURCE_BRANCH into $RELEASE_BRANCH, this PR is generated by release-prep script\",
  \"head\":\"$TEMP_RELEASE_NAME\",
  \"base\":\"$RELEASE_BRANCH\"}" )

pr1url=$(echo $response | grep -o '"html_url": "[^"]*' | awk -F': "' '{print $2}' | head -n 1)


# Create new branch for PR
TEMP_DEVELOP_NAME="inc-develop-version-$RELEASE_VERSION"
git checkout $SOURCE_BRANCH
git checkout -b $TEMP_DEVELOP_NAME $SOURCE_BRANCH

# Increment source branch version
yarn run set-source-versions-ci

# Set source dependency versions
yarn run set-dependency-versions-ci

# Push source branch changes
git commit -am 'increment develop versions'
git push --set-upstream origin $TEMP_DEVELOP_NAME

# create PR inc-develop-version -> source
response=$(curl -L --silent \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $GITHUB_WRITE_TOKEN" \
  https://api.github.com/repos/solarwinds/nova/pulls \
  -d "{\"title\":\"Increment develop version for v$RELEASE_VERSION\",
  \"body\":\"This PR is generated by release-prep script\",
  \"head\":\"$TEMP_DEVELOP_NAME\",
  \"base\":\"$SOURCE_BRANCH\"}" )

pr2url=$(echo $response | grep -o '"html_url": "[^"]*' | awk -F': "' '{print $2}' | head -n 1)

echo ""
echo "RELEASE PR: ${pr1url}"
echo "DEVELOP PR: ${pr2url}"
