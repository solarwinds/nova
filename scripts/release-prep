#!/bin/bash
set -e

if [ "$SOURCE_BRANCH" == "" ]; then
      echo "Missing required environment variable SOURCE_BRANCH"
      exit 1
fi

if [ "$RELEASE_BRANCH" == "" ]; then
      echo "Missing required environment variable RELEASE_BRANCH"
      exit 1
fi

if [ "$CIRCLE_BRANCH" == "" ]; then
      echo "Missing required environment variable CIRCLE_BRANCH"
      exit 1
fi

if [ "$INCREMENT_TYPE" == "" ]; then
      echo "Missing required environment variable INCREMENT_TYPE"
      exit 1
fi

if [ "$SOURCE_BRANCH" != "$CIRCLE_BRANCH" ]; then
    echo "ERROR: configuration should be run on the branch that contains the changes (usually main)"
    exit 1
fi

# Merge Changes
if ! git show-ref --quiet $RELEASE_BRANCH; then
    echo "Creating release branch:" $CREATE_RELEASE_BRANCH
    if [ "$CREATE_RELEASE_BRANCH" == "true" ]; then
        echo "Creating $RELEASE_BRANCH"
        git checkout -b $RELEASE_BRANCH
        git push --set-upstream origin $RELEASE_BRANCH
    else
        echo "ERROR: release branch does not exist"
        exit 1
    fi
fi

# initial merge with "ours" strategy to auto-resolve conflicts
git checkout $SOURCE_BRANCH || exit 1
git pull origin $RELEASE_BRANCH --rebase -s ours || exit 1
git checkout $RELEASE_BRANCH || exit 1
git merge --no-edit $SOURCE_BRANCH || exit 1

# Set Release Version
yarn run set-release-versions-ci

# Set Release Dependency Versions
yarn run set-dependency-versions-ci

# Commit and Push Release Branch Changes
git commit -am "update files for version $RELEASE_VERSION"
git push --verbose

# Increment source branch version
git checkout $SOURCE_BRANCH
yarn run set-source-versions-ci

# Set source dependency versions
yarn run set-dependency-versions-ci

# Push source branch changes
git commit -am 'increment develop versions' && git push origin $SOURCE_BRANCH
