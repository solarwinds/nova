#!/bin/bash
set -xe
export RELEASE_VERSION=$(node -p "require('./package.json').version")

if [ "$SOURCE_BRANCH" == "" ]; then
      echo "Missing required environment variable SOURCE_BRANCH"
      exit 1
fi

if [ "$RELEASE_BRANCH" == "" ]; then
      echo "Missing required environment variable RELEASE_BRANCH"
      exit 1
fi

if [ "$CIRCLE_BRANCH" == "" ]; then
      echo "Missing required environment variable CIRCLE_BRANCH"
      exit 1
fi

if [ "$INCREMENT_TYPE" == "" ]; then
      echo "Missing required environment variable INCREMENT_TYPE"
      exit 1
fi

if [ "$SOURCE_BRANCH" != "$CIRCLE_BRANCH" ]; then
    if [[ $CIRCLE_BRANCH != *"cci-release"* ]]; then
        echo "ERROR: configuration should be run on the branch that contains the changes (usually main)"
        exit 1
    fi
fi

# Merge Changes
echo "Merge Changes"

if ! git show-ref --quiet $RELEASE_BRANCH; then
    echo "Creating release branch:" $CREATE_RELEASE_BRANCH
    if [ "$CREATE_RELEASE_BRANCH" == "true" ]; then
        echo "Creating $RELEASE_BRANCH"
        git checkout -b $RELEASE_BRANCH
        git push --set-upstream origin $RELEASE_BRANCH
    else
        echo "ERROR: release branch does not exist"
        exit 1
    fi
fi

echo updating the release branch with all what we have in main without making new commits
git checkout $RELEASE_BRANCH
git merge $SOURCE_BRANCH --no-edit --no-ff -X theirs

yarn run set-release-versions-ci
yarn run set-dependency-versions-ci
RELEASE_VERSION_UPDATED=$(node -p "require('./package.json').version")
echo Make a new commit in release branch with new version $RELEASE_VERSION
git commit --amend -am "Release: $RELEASE_VERSION_UPDATED"
git push origin $RELEASE_BRANCH
