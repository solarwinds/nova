#!/bin/bash
set -e

usage()
{
    echo "Usage: docker-compose run -e BUILD_BRANCH=%teamcity.build.branch% build npm run merge-ci"
    echo
    echo "Merge changes to the release branch"
    echo
    echo "Options:"
    echo "  -h, --help       [Optional] Show this help message"
}

while [ -n "$1" ]; do
    case "$1" in
    -h|--help)
        usage
        exit
        ;;
    -*)
        echo "Unexpected argument '$1'."
        exit 1
        ;;
    esac
done

if [ "$SOURCE_BRANCH" != "$CIRCLE_BRANCH" ]; then
    echo "ERROR: configuration should be run on the branch that contains the changes (usually main)"
    exit 1
fi

if ! git show-ref --quiet $RELEASE_BRANCH; then
    echo "Creating release branch:" $CREATE_RELEASE_BRANCH
    if [ "$CREATE_RELEASE_BRANCH" == "true" ]; then
        echo "Creating $RELEASE_BRANCH"
        git checkout -b $RELEASE_BRANCH
        git push --set-upstream origin $RELEASE_BRANCH
    else
        echo "ERROR: release branch does not exist"
        exit 1
    fi
fi

# initial merge with "ours" strategy to auto-resolve conflicts
git checkout $SOURCE_BRANCH
git pull origin $RELEASE_BRANCH -s ours
git checkout $RELEASE_BRANCH

# get last release version
if test -f package.json; then
    echo "##teamcity[setParameter name='env.PACKAGE_VERSION' value='$(grep -E "\"version\":( )*\"([a-zA-Z0-9\.-]*)\"" package.json | sed -E 's/^.*"([0-9]+\.[0-9]+\.[^"]*).*$/\1/g' )']"
else
    echo "get-version script failed: package.json missing"
    exit 1
fi

git merge $SOURCE_BRANCH
