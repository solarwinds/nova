#!/bin/bash
set -xe
#
## Function to get the current version using Node.js
#get_current_version() {
#    node -e "console.log(require('./package.json').version)"
#}
#
## Function to get the version from a specific branch
#get_branch_version() {
#    local branch=$1
#    git show "$branch:package.json" | node -e "let pkg = JSON.parse(require('fs').readFileSync(0, 'utf8')); console.log(pkg.version);"
#}
#
## Variables
#current_version=$(get_current_version)
#main_branch_version=$(get_branch_version main)
#release_branch_version=$(get_branch_version release/v16.0.x)
#
## Determine the release type
#release_type=""
#if [[ "$current_version" == "$main_branch_version" ]]; then
#    if [[ "${main_branch_version%%.*}" == "${release_branch_version%%.*}" ]] && \
#       [[ "${main_branch_version%.*}" == "${release_branch_version%.*}" ]]; then
#        release_type="patch"
#    else
#        release_type="release"
#    fi
#else
#    echo "Error: Current version does not match main branch version. Aborting."
#    exit 1
#fi
#
#echo "Release Type: $release_type"
#
## Update versions based on release type
#export INCREMENT_TYPE=$release_type
##bash scripts/set-source-versions
##bash scripts/set-dependency-versions
#not bad
#!/bin/bash

# Function to get the version from a specific branch
get_branch_version() {
    local branch=$1
    git show "$branch:package.json" | node -e "let pkg = JSON.parse(require('fs').readFileSync(0, 'utf8')); console.log(pkg.version);"
}

# Variables
main_branch_version=$(get_branch_version main)
release_branch_version=$(get_branch_version release/v16.0.x)

# Function to compute the next version
compute_next_version() {
    local main_version=$1
    local release_version=$2

    # Extract base versions and pre-release numbers
    local release_base="${release_version%-*}" # Remove pre-release suffix if present
    local main_base="${main_version%-*}"       # Remove pre-release suffix if present
    local main_suffix="${main_version##*-}"    # Extract pre-release suffix, if any

    # Ensure main_suffix is numeric or default to -1 for no suffix
    if [[ ! "$main_suffix" =~ ^[0-9]+$ ]]; then
        main_suffix=-1
    fi

    # Compare versions
    if [[ "$main_base" < "$release_base" ]]; then
        # Increment release base patch and reset pre-release suffix
        local next_patch=$(( ${release_base##*.} + 1 ))
        local base_version="${release_base%.*}.$next_patch"
        echo "${base_version}-0"
    elif [[ "$main_base" == "$release_base" ]]; then
       # Increment release base patch and reset pre-release suffix
      local next_patch=$(( ${release_base##*.} + 1 ))
      local base_version="${release_base%.*}.$next_patch"
      echo "${base_version}-0"
    else
        echo "${main_base}-$((main_suffix + 1))"
    fi
}

# Compute the next version
next_version=$(compute_next_version "$main_branch_version" "$release_branch_version")
echo "Next Version: $next_version"

# Use the computed next version in your scripts or export it
export NEXT_VERSION=$next_version
#bash scripts/set-source-versions
#bash scripts/set-dependency-versions
